// stdout:
//   expected world
//   but was hello

fun main() !Io -> Unit {
    val result = assertThat("hello", isString("world"));
    if (result is Failure) {
        print(result.message + "\n");
    }
}

fun assertThat[T](value: T, matcher: Matcher[T]) -> Result {
    val result = matcher.match(value);
    if (result is Failure) {
        Failure(message = "expected " + matcher.description + "\nbut " + result.message)
    } else {
        result
    }
}

fun anything() -> Matcher[Any] {
    Matcher(
        description = "anything",
        match = fun (x: Any) => success,
    )
}

fun isString(value: String) -> Matcher[String] {
    describingMatcher(
        value,
        fun (string: String) => string,
        fun (actual: String) => actual == value,
    )
}

fun describingMatcher[T](
    value: T,
    toString: (T) -> String,
    match: (T) -> Bool
) -> Matcher[T] {
    Matcher(
        description = toString(value),
        match = fun (actual: T) -> Result {
            if (match(actual)) {
                success
            } else {
                failure("was " + toString(actual))
            }
        },
    )
}

shape Matcher[-T] {
    description: String,
    match: (T) -> Result,
}

union Result =
    | Success
    | Failure {
      message: String,
    };

val success = Success();
fun failure(message: String) -> Failure {
    Failure(message=message)
}
