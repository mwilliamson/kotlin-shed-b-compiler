// name: forEach
// stdout:
//   1
//   2
//   3

union List[T] = Cons[T] | Nil;
shape Cons[T] tag-value-for List {
    head: T,
    tail: List[T],
}
shape Nil tag-value-for List {}
val nil = Nil();

fun cons[T](head: T, tail: List[T]) -> List[T] {
    return Cons(head=head, tail=tail);
}

fun printInts(list: List[Int]) !io -> Unit {
    forEach(printInt, list);
}

fun printInt(value: Int) !io -> Unit {
    print(intToString(value) + "\n");
}

fun forEach[T, !E](func: (T) !E -> Unit, list: List[T]) !E -> Unit {
    if (list is Cons[T]) {
        func(list.head);
        forEach(func, list.tail);
    }
}

fun main() !io -> Unit {
    val list = cons(1, cons(2, cons(3, nil)));
    printInts(list);
}
