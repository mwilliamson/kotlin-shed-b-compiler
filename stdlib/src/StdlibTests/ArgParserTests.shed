export testCases;

import ArgParser from Stdlib.ArgParser;
import @(.list as list) from Stdlib.Lists;
import M from Stdlib.Matchers;
import Options from Stdlib.Options;
import Tests from Stdlib.Tests;

fun isFailure(.message: M.Matcher[String]) -> M.Matcher[ArgParser.ParseResult[Any]] {
    M.isTypeWith(
        .description = "failure",
        .describeValue = fun (value: ArgParser.ParseResult[Any]) {
            when (value) {
                is ArgParser.Failure { "failure" }
                is ArgParser.Success { "success" }
            }
        },
        .cast = cast~(ArgParser.Failure),
        .with = M.hasField(ArgParser.Failure.fields.message, message),
    )
}

fun isSuccess[T](valueMatcher: M.Matcher[T]) -> M.Matcher[ArgParser.ParseResult[T]] {
    M.isTypeWith(
        .description = "success",
        .describeValue = fun (value: ArgParser.ParseResult[T]) {
            when (value) {
                is ArgParser.Failure { "failure" }
                is ArgParser.Success { "success" }
            }
        },
        .cast = cast~(ArgParser.Success[T]),
        .with = M.hasField(ArgParser.Success[T].fields.value, valueMatcher),
    )
}

val testCases = Tests.suite(moduleName, list(
    Tests.testCase("can parse single required positional argument", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list("hello");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("message", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isString("hello")),
        ))
    }),

    Tests.testCase("can parse multiple required positional argument", fun () {
        shape Args {
            one: String,
            two: String,
            three: String,
        }

        val rawArguments = list("hello", "world", "!");

        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("one", ArgParser.string, Args.fields.one.update)
            |> ArgParser.positional~("two", ArgParser.string, Args.fields.two.update)
            |> ArgParser.positional~("three", ArgParser.string, Args.fields.three.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(M.allOf(list(
            M.hasField(Args.fields.one, M.isString("hello")),
            M.hasField(Args.fields.two, M.isString("world")),
            M.hasField(Args.fields.three, M.isString("!")),
        ))))
    }),

    Tests.testCase("when required positional argument is missing then result is failure", fun () {
        shape Args {
            one: String,
            two: String,
            three: String,
        }

        val rawArguments = list("hello");

        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("one", ArgParser.string, Args.fields.one.update)
            |> ArgParser.positional~("two", ArgParser.string, Args.fields.two.update)
            |> ArgParser.positional~("three", ArgParser.string, Args.fields.three.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("required argument is missing: two"),
        ))
    }),

    Tests.testCase("when argument is present then optional positional argument is some", fun () {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list("hello");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("message", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isSome(M.isString("hello"))),
        ))
    }),

    Tests.testCase("when argument is not present then optional positional argument is none", fun () {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list();
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("message", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isNone()),
        ))
    }),

    Tests.testCase("extra positional argument causes error", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list("hello", "world");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.positional~("message", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("extra positional argument: world"),
        ))
    }),

    Tests.testCase("when optional long option is present as separate element then value is some", fun () {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list("--long-option", "value");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isSome(M.isString("value"))),
        ))
    }),

    Tests.testCase("when optional long option is present using equals then value is some", fun() {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list("--long-option=value");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isSome(M.isString("value"))),
        ))
    }),

    Tests.testCase("when optional long option is absent then value is none", fun () {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list();
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isNone()),
        ))
    }),

    Tests.testCase("when required long option is present then value is stored", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list("--long-option", "hello");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isString("hello")),
        ))
    }),

    Tests.testCase("when required long option is missing then result is failure", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list();
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("required argument is missing: --long-option"),
        ))
    }),

    Tests.testCase("when unrecognised long option is present then result is failure", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list("--unknown-option", "value", "--long-option", "value");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("unknown option: --unknown-option"),
        ))
    }),

    Tests.testCase("when required long option is missing value then result is failure", fun () {
        shape Args {
            x: String,
        }

        val rawArguments = list("--long-option");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.string, Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("option is missing value: --long-option"),
        ))
    }),

    Tests.testCase("when optional long option is missing value then result is failure", fun () {
        shape Args {
            x: Option[String],
        }

        val rawArguments = list("--long-option");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.option~("--long-option", ArgParser.optional(ArgParser.string), Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("option is missing value: --long-option"),
        ))
    }),

    Tests.testCase("when flag is missing then value is false", fun () {
        shape Args {
            x: Bool,
        }

        val rawArguments = list();
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.flag~("--flag", Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isBool(false)),
        ))
    }),

    Tests.testCase("when flag is present then value is true", fun () {
        shape Args {
            x: Bool,
        }

        val rawArguments = list("--flag");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.flag~("--flag", Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isSuccess(
            M.hasField(Args.fields.x, M.isBool(true)),
        ))
    }),

    Tests.testCase("when flag has value using equals then result is failure", fun () {
        shape Args {
            x: Bool,
        }

        val rawArguments = list("--flag=1");
        val argParser = ArgParser.parser(empty[Args]())
            |> ArgParser.flag~("--flag", Args.fields.x.update);

        val arguments = ArgParser.parse(argParser, rawArguments);

        Tests.assertThat(arguments, isFailure(
            .message = M.isString("flag does not take value: --flag"),
        ))
    }),
));
