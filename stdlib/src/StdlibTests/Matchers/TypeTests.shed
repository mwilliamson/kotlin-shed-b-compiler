export testCases;

import @(.list as list) from Stdlib.Lists;
import M from Stdlib.Matchers;
import Options from Stdlib.Options;
import Tests from Stdlib.Tests;

union X =
    | Y {
        value: Int,
    }
    | Z {
    };

val hasMatcher = M.has("value", fun (value: Y) => value.value, M.isInt(42));

val hasSuite = Tests.suite("has", list(
    Tests.testCase("matches when feature matcher matches", fun () {
        val result = hasMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("when feature mismatches then mismatches with feature mismatch description", fun () {
        val result = hasMatcher.match(Y(.value = 47));

        when (result) {
            is M.Failure {
                Tests.assertStringEquals(result.message, "value:\n  was 47")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description has feature name and description", fun () {
        Tests.assertStringEquals(hasMatcher.description, "value:\n  is 42")
    }),
));

val hasFieldMatcher = M.hasField(Y.fields.value, M.isInt(42));

val hasFieldSuite = Tests.suite("hasField", list(
    Tests.testCase("matches when field value matcher matches", fun () {
        val result = hasFieldMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("when field value mismatches then mismatches with field value mismatch description", fun () {
        val result = hasFieldMatcher.match(Y(.value = 47));

        when (result) {
            is M.Failure {
                Tests.assertStringEquals(result.message, ".value:\n  was 47")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description has field name and description", fun () {
        Tests.assertStringEquals(hasFieldMatcher.description, ".value:\n  is 42")
    }),
));

val isTypeMatcher = M.isType[X, Y](
    .description = "Y",
    .describeValue = fun (value: X) {
        when (value) {
            is Y { "Y" }
            is Z { "Z" }
        }
    },
    .cast = cast(X, Y),
);

val isTypeSuite = Tests.suite("isType", list(
    Tests.testCase("matches when cast succeeds", fun () {
        val result = isTypeMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("mismatches with value description when cast fails", fun () {
        val result = isTypeMatcher.match(Z());

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "was Z")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description is passed as argument", fun () {
        Tests.assert(isTypeMatcher.description == "Y")
    }),
));

val isTypeWithMatcher = M.isTypeWith[X, Y](
    .description = "Y",
    .describeValue = fun (value: X) {
        when (value) {
            is Y { "Y" }
            is Z { "Z" }
        }
    },
    .cast = cast(X, Y),
    .with = M.Matcher(
        .description = "value of 42",
        .match = fun (value: Y) {
            if (value.value == 42) {
                M.success
            } else {
                M.failure("value was " + intToString(value.value))
            }
        }
    ),
);

val isTypeWithSuite = Tests.suite("isTypeWith", list(
    Tests.testCase("matches when cast and with matcher succeeds", fun () {
        val result = isTypeWithMatcher.match(Y(.value = 42));

        Tests.assert(M.isSuccess(result))
    }),

    Tests.testCase("mismatches with value description when cast fails", fun () {
        val result = isTypeWithMatcher.match(Z());

        when (result) {
            is M.Failure {
                Tests.assert(result.message == "was Z")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("mismatches with with mismatch description when with fails", fun () {
        val result = isTypeWithMatcher.match(Y(.value = 47));

        when (result) {
            is M.Failure {
                Tests.assertStringEquals(result.message, "Y:\n  value was 47")
            }
            is M.Success {
                Tests.fail("expected failure but was success")
            }
        }
    }),

    Tests.testCase("description has type and with description", fun () {
        Tests.assertStringEquals(isTypeWithMatcher.description, "Y:\n  value of 42")
    }),
));

val testCases = Tests.suite(moduleName, list(
    hasSuite,
    hasFieldSuite,
    isTypeSuite,
    isTypeWithSuite,
));
