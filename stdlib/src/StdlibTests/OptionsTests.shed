export testCases;

import @(.list as list) from Stdlib.Lists;
import Matchers from Stdlib.Matchers;
import Options from Stdlib.Options;
import Tests from Stdlib.Tests;

fun addOne(value: Int) -> Int {
    value + 1
}

val testCases = Tests.suite(moduleName, list(
    Tests.suite("default", list(
        Tests.testCase("default(x, some(y)) is y", fun () {
            Tests.assertThat(
                Options.default(1, some(2)),
                Matchers.isInt(2)
            )
        }),

        Tests.testCase("default(x, none) is x", fun () {
            Tests.assertThat(
                Options.default(1, none),
                Matchers.isInt(1)
            )
        }),
    )),

    Tests.suite("flatMap", list(
        Tests.testCase("flatMap(f, none) is none", fun () {
            Tests.assertThat(
                Options.flatMap(fun (value: Int) => some(value + 1), none),
                Matchers.isNone(),
            )
        }),

        Tests.testCase("flatMap(f, some(x)) is f(x)", fun () {
            Tests.assertThat(
                Options.flatMap(fun (value: Int) => some(value + 1), some(42)),
                Matchers.isSome(Matchers.isInt(43))
            )
        }),
    )),

    Tests.suite("map", list(
        Tests.testCase("map(f, none) is none", fun () {
            Tests.assertThat(Options.map(addOne, none), Matchers.isNone())
        }),

        Tests.testCase("map(f, some(x)) is some(f(x))", fun () {
            Tests.assertThat(
                Options.map(addOne, some(42)),
                Matchers.isSome(Matchers.isInt(43))
            )
        }),
    )),
));

