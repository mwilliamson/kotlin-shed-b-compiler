export testCases;

import Lists from Stdlib.Lists;
import @(.list as list) from Stdlib.Lists;
import Matchers from Stdlib.Matchers;
import Strings from Stdlib.Strings;
import Tests from Stdlib.Tests;

shape SuccessTestCase {
    text: String,
    value: Int,
}

val successTestCases = list(
    SuccessTestCase(.text = "0", .value = 0),
    SuccessTestCase(.text = "-0", .value = 0),
    SuccessTestCase(.text = "1", .value = 1),
    SuccessTestCase(.text = "-1", .value = -1),
    SuccessTestCase(.text = "2", .value = 2),
    SuccessTestCase(.text = "-2", .value = -2),
    SuccessTestCase(.text = "9", .value = 9),
    SuccessTestCase(.text = "-9", .value = -9),
    SuccessTestCase(.text = "42", .value = 42),
    SuccessTestCase(.text = "-42", .value = -42),
    SuccessTestCase(.text = "192", .value = 192),
    SuccessTestCase(.text = "-192", .value = -192),
    SuccessTestCase(.text = "9999999999999999999999999999999999", .value = 9999999999999999999999999999999999),
    SuccessTestCase(.text = "-9999999999999999999999999999999999", .value = -9999999999999999999999999999999999),
);

val testCases = Tests.suite(moduleName, list(
    Tests.suite("parseInt", list(
        Tests.suite("can parse", Lists.map(
            fun (testCase: SuccessTestCase) => Tests.testCase(testCase.text, fun () !_ {
                Tests.assertThat!(Strings.parseInt(testCase.text), Matchers.isSome(Matchers.isInt(testCase.value)));
            }),
            successTestCases,
        )),

        Tests.testCase("empty string is parsed as none", fun () !_ {
            Tests.assertThat!(Strings.parseInt(""), Matchers.isNone());
        }),
    )),
));
