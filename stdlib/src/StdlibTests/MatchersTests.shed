export testCases;

import @(.list as list) from Stdlib.Lists;
import M from Stdlib.Matchers;
import Tests from Stdlib.Tests;
import EqualityTests from .Matchers.EqualityTests;
import TypeTests from .Matchers.TypeTests;

val allOfTestCases = Tests.suite(moduleName, list(
    Tests.suite("allOf", list(
        Tests.testCase("allOf() succeeds when all sub-matchers succeed", fun () {
            shape X {
                one: Int,
                two: Int,
            }

            val matcher = M.allOf(list(
                M.hasField(X.fields.one, M.isInt(1)),
                M.hasField(X.fields.two, M.isInt(2)),
            ));

            val result = matcher.match(X(
                .one = 1,
                .two = 2,
            ));

            Tests.assert(M.isSuccess(result))
        }),

        Tests.testCase("allOf() fails with first error when any sub-matchers fails", fun () {
            shape X {
                one: Int,
                two: Int,
                three: Int,
            }

            val matcher = M.allOf(list(
                M.hasField(X.fields.one, M.isInt(1)),
                M.hasField(X.fields.two, M.isInt(2)),
                M.hasField(X.fields.three, M.isInt(3)),
            ));

            val result = matcher.match(X(
                .one = 1,
                .two = 1,
                .three = 1,
            ));

            when (result) {
                is M.Failure {
                    Tests.assert(result.message == "two was 1")
                }
                is M.Success {
                    Tests.fail("expected failure but was success")
                }
            }
        }),
    )),
));

val testCases = list(
    allOfTestCases,
    EqualityTests.testCases,
    TypeTests.testCases,
);
