export testCases;

import Json from Stdlib.Json;
import Lists from Stdlib.Lists;
import @(.list as list, .List as List) from Stdlib.Lists;
import M from Stdlib.Matchers;
import Options from Stdlib.Options;
import Tests from Stdlib.Tests;

type JsonValueMatcher = M.Matcher[Json.JsonValue];

val isFailure = M.Matcher(
    .description = "failure",
    .match = fun (actual: Json.JsonResult) -> M.Result {
        when (actual) {
            is Json.JsonSuccess {
                M.failure("was success")
            }
            is Json.JsonFailure {
                M.success
            }
        }
    },
);

fun isSuccess(value: JsonValueMatcher) -> M.Matcher[Json.JsonResult] {
    M.Matcher(
        .description = "success with value " + value.description,
        .match = fun (actual: Json.JsonResult) -> M.Result {
            when (actual) {
                is Json.JsonSuccess {
                    value.match(actual.value)
                }
                is Json.JsonFailure {
                    M.failure("was failure")
                }
            }
        },
    )
}

fun hasJsonText(expectedText: String) -> JsonValueMatcher {
    M.Matcher(
        .description = "has JSON text: " + expectedText,
        .match = fun (actual: Json.JsonValue) -> M.Result {
            val text = Json.valueToText(actual);
            if (text == expectedText) {
                M.success
            } else {
                M.failure("text was: " + text)
            }
        },
    )
}

fun isJson(.description: String, .predicate: Fun (Json.JsonValue) -> Bool) -> M.Matcher[Json.JsonValue] {
    M.Matcher(
        .description = description,
        .match = fun (actual: Json.JsonValue) -> M.Result {
            if (predicate(actual)) {
                M.success
            } else {
                M.failure("was " + Json.valueToText(actual))
            }
        },
    )
}

val isJsonNull = isJson(
    .description = "null",
    .predicate = fun (actual: Json.JsonValue) -> Bool {
        actual is Json.JsonNull
    },
);

fun isJsonBoolean(value: Bool) -> M.Matcher[Json.JsonValue] {
    M.isTypeWith[Json.JsonValue, Json.JsonBoolean](
        .description = "JsonBoolean",
        .describeValue = Json.valueToText,
        .cast = cast~(Json.JsonBoolean),
        .with = M.hasField(Json.JsonBoolean.fields.value, M.isBool(value)),
    )
}

fun isJsonArray(elements: M.Matcher[List[Json.JsonValue]]) -> M.Matcher[Json.JsonValue] {
    isJson(
        .description = "JSON array with elements: " + elements.description,
        .predicate = fun (actual: Json.JsonValue) -> Bool {
            if (actual is Json.JsonArray) {
                M.isSuccess(elements.match(actual.elements))
            } else {
                false
            }
        }
    )
}

fun isJsonString(value: String) -> M.Matcher[Json.JsonValue] {
    isJson(
        .description = Json.valueToText(Json.string(value)),
        .predicate = fun (actual: Json.JsonValue) -> Bool {
            if (actual is Json.JsonString) {
                actual.value == value
            } else {
                false
            }
        },
    )
}

val testCases = Tests.suite(moduleName, list(
    Tests.suite("valueToText", list(
        Tests.testCase("null", fun () !_ {
            val value = Json.null;
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("null"));
        }),

        Tests.testCase("true", fun () !_ {
            val value = Json.boolean(true);
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("true"));
        }),

        Tests.testCase("false", fun () !_ {
            val value = Json.boolean(false);
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("false"));
        }),

        Tests.testCase("number", fun () !_ {
            val value = Json.number("1.2");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("1.2"));
        }),

        Tests.testCase("empty string", fun () !_ {
            val value = Json.string("");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\""));
        }),

        Tests.testCase("string without special characters", fun () !_ {
            val value = Json.string("apples");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"apples\""));
        }),

        Tests.testCase("backslashes are escaped", fun () !_ {
            val value = Json.string("\\ \\");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\\\ \\\\\""));
        }),

        Tests.testCase("double quotes are escaped", fun () !_ {
            val value = Json.string("\" \"");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\\" \\\"\""));
        }),

        Tests.testCase("tabs are escaped", fun () !_ {
            val value = Json.string("\t \t");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\t \\t\""));
        }),

        Tests.testCase("line feeds are escaped", fun () !_ {
            val value = Json.string("\n \n");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\n \\n\""));
        }),

        Tests.testCase("carriage returns are escaped", fun () !_ {
            val value = Json.string("\r \r");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\r \\r\""));
        }),

        Tests.testCase("control codes are escaped", fun () !_ {
            val value = Json.string("\u{B}");
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("\"\\u000B\""));
        }),

        Tests.testCase("empty array is serialised to square brackets", fun () !_ {
            val value = Json.array(list());
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("[]"));
        }),

        Tests.testCase("singleton array is serialised to square brackets containing element", fun () !_ {
            val value = Json.array(list(Json.null));
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("[null]"));
        }),

        Tests.testCase("array elements are comma separated", fun () !_ {
            val value = Json.array(list(Json.null, Json.boolean(true), Json.boolean(false)));
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("[null,true,false]"));
        }),

        Tests.testCase("empty object is serialised to curly braces", fun () !_ {
            val value = Json.object(list());
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("{}"));
        }),

        Tests.testCase("singleton object is serialised to curly braces containing property", fun () !_ {
            val value = Json.object(list(Json.property("apples", Json.null)));
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("{\"apples\":null}"));
        }),

        Tests.testCase("object properties are comma separated", fun () !_ {
            val value = Json.object(list(
                Json.property("apples", Json.null),
                Json.property("bananas", Json.boolean(true)),
                Json.property("coconut", Json.boolean(false)),
            ));
            val text = Json.valueToText(value);
            Tests.assertThat!(text, M.isString("{\"apples\":null,\"bananas\":true,\"coconut\":false}"));
        }),
    )),

    Tests.suite("textToValue", list(
        Tests.testCase("null", fun () !_ {
            val text = "null";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonNull));
        }),

        Tests.testCase("true", fun () !_ {
            val text = "true";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonBoolean(true)));
        }),

        Tests.testCase("false", fun () !_ {
            val text = "false";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonBoolean(false)));
        }),

        Tests.testCase("empty string", fun () !_ {
            val text = "\"\"";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonString("")));
        }),

        Tests.testCase("single character string", fun () !_ {
            val text = "\"a\"";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonString("a")));
        }),

        Tests.testCase("multiple character string", fun () !_ {
            val text = "\"aasfcasf\"";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonString("aasfcasf")));
        }),

        Tests.testCase("empty array", fun () !_ {
            val text = "[]";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("[]")));
        }),

        Tests.testCase("array with single element", fun () !_ {
            val text = "[true]";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("[true]")));
        }),

        Tests.testCase("array with two elements", fun () !_ {
            val text = "[true, false]";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("[true,false]")));
        }),

        Tests.testCase("array with three elements", fun () !_ {
            val text = "[true, false, null]";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("[true,false,null]")));
        }),

        Tests.testCase("unclosed array causes failure", fun () !_ {
            val text = "[true, false";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isFailure);
        }),

        Tests.testCase("empty object", fun () !_ {
            val text = "{}";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("{}")));
        }),

        Tests.testCase("object with one property", fun () !_ {
            val text = "{\"first\": true}";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("{\"first\":true}")));
        }),

        Tests.testCase("object with two properties", fun () !_ {
            val text = "{\"first\": true, \"second\": false}";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("{\"first\":true,\"second\":false}")));
        }),

        Tests.testCase("object with three properties", fun () !_ {
            val text = "{\"first\": true, \"second\": false, \"third\": null}";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(hasJsonText("{\"first\":true,\"second\":false,\"third\":null}")));
        }),

        Tests.testCase("leading whitespace is ignored", fun () !_ {
            val text = "  \n\r\tfalse";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonBoolean(false)));
        }),

        Tests.testCase("trailing whitespace is ignored", fun () !_ {
            val text = "false  \n\r\t";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isSuccess(isJsonBoolean(false)));
        }),

        Tests.testCase("text after top-level value causes failure", fun () !_ {
            val text = "false true";
            val result = Json.textToValue(text);
            Tests.assertThat!(result, isFailure);
        }),
    )),
));
