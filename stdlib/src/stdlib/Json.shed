import stdlib.Lists;
import stdlib.Options;
import stdlib.Sequences;
import stdlib.strings.CodePoints;
import stdlib.Unfold;


union JsonValue =
    | JsonObject {
        properties: List[JsonProperty],
    }
    | JsonArray {
        elements: List[JsonValue],
    }
    | JsonNumber {
        value: String,
    }
    | JsonString {
        value: String,
    }
    | JsonBoolean {
        value: Bool,
    }
    | JsonNull;

fun object(properties: List[JsonProperty]) -> JsonValue {
    JsonObject(properties = properties)
}

shape JsonProperty {
    key: String,
    value: JsonValue,
}

fun property(key: String, value: JsonValue) -> JsonProperty {
    JsonProperty(key = key, value = value)
}

fun array(elements: List[JsonValue]) -> JsonValue {
    JsonArray(elements = elements)
}

fun number(value: String) -> JsonValue {
    JsonNumber(value = value)
}

fun string(value: String) -> JsonValue {
    JsonString(value = value)
}

fun boolean(value: Bool) -> JsonValue {
    JsonBoolean(value = value)
}

val null = JsonNull();

fun valueToText(value: JsonValue) -> String {
    when (value) {
        is JsonObject {
            val properties = CodePoints.join(",", Lists.map(propertyToText, value.properties));
            "{" + properties + "}"
        }
        is JsonArray {
            val elements = CodePoints.join(",", Lists.map(valueToText, value.elements));
            "[" + elements +  "]"
        }
        is JsonNumber {
            value.value
        }
        is JsonString {
            jsonStringToText(value.value)
        }
        is JsonBoolean {
            if (value.value) {
                "true"
            } else {
                "false"
            }
        }
        is JsonNull {
            "null"
        }
    }
}

fun propertyToText(property: JsonProperty) -> String {
    jsonStringToText(property.key) + ":" + valueToText(property.value)
}

fun jsonStringToText(value: String) -> String {
    val characters = CodePoints.mapCodePoints(jsonStringCodePointToText, value);
    "\"" + characters + "\""
}

fun jsonStringCodePointToText(codePoint: CodePoint) -> String {
    if (codePoint == '\\') {
        "\\\\"
    } else if (codePoint == '\"') {
        "\\\""
    } else if (codePoint == '\t') {
        "\\t"
    } else if (codePoint == '\n') {
        "\\n"
    } else if (codePoint == '\r') {
        "\\r"
    } else if (codePoint < '\u{20}') {
        val hexString = CodePoints.codePointToHexString(codePoint);
        "\\u" + CodePoints.padLeft(4, '0', hexString)
    } else {
        CodePoints.codePointToString(codePoint)
    }
}

fun textToValue(text: String) -> JsonValue {
    val tokens = tokenise(text);
    tokensToValue(tokens)
}

fun tokensToValue(tokens: Sequences.Sequence[Token, Pure]) -> JsonValue {
    val iterator = tokens.next();
    when (iterator) {
        is Sequences.SequenceEnd {
            null
        }
        is Sequences.SequenceItem[Token, Pure] {
            when (iterator.head.tokenType) {
                is TokenTrue {
                    boolean(true)
                }
                is TokenFalse {
                    boolean(false)
                }
                is TokenNull {
                    null
                }
                is TokenOpenSquare {
                    array(list())
                }
                is TokenCloseSquare {
                    null
                }
                is TokenWhitespace {
                    tokensToValue(iterator.tail)
                }
                is TokenUnexpected {
                    null
                }
                is TokenEnd {
                    null
                }
            }
        }
    }
}

union TokenType = TokenWhitespace | TokenNull | TokenTrue | TokenFalse | TokenOpenSquare | TokenCloseSquare | TokenUnexpected | TokenEnd;

shape Token {
    tokenType: TokenType,
    value: String,
}

fun token(tokenType: TokenType, value: String) -> Token {
    Token(tokenType = tokenType, value = value)
}

fun nextToken(value: String) -> Token {
    val maybeFirst = CodePoints.firstCodePoint(value);
    when (maybeFirst) {
        is Options.Some {
            val first = maybeFirst.value;
            if (first == 't' && CodePoints.startsWith("true", value)) {
                token(TokenTrue(), "true")
            } else if (first == 'f' && CodePoints.startsWith("false", value)) {
                token(TokenFalse(), "false")
            } else if (first == 'n' && CodePoints.startsWith("null", value)) {
                token(TokenNull(), "null")
            } else if (first == '[') {
                token(TokenOpenSquare(), "[")
            } else if (first == ']') {
                token(TokenCloseSquare(), "]")
            } else if (isWhitespace(first)) {
                val whitespace = value |> CodePoints.leftWhile ~ (isWhitespace);
                token(TokenWhitespace(), whitespace)
            } else {
                token(TokenUnexpected(), CodePoints.left(1, value))
            }
        }
        is Options.None {
            token(TokenEnd(), "")
        }
    }
}

fun isWhitespace(value: CodePoint) -> Bool {
    value == ' ' || value == '\n' || value == '\r' || value == '\t'
}

val tokenise = Unfold.unfold ~ (fun (value: String) -> Unfold.Next[Token, String] {
    val token = nextToken(value);
    if (token.tokenType is TokenEnd) {
        Unfold.end
    } else {
        val remainder = CodePoints.dropLeft(CodePoints.length(token.value), value);
        Unfold.continue(token, remainder)
    }
});
