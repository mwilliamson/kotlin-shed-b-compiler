export ParseResult, Success, Failure, parser, parse, positional, option, flag, optional, string, map, apply;

import ListBuilder from .ListBuilder;
import ListLookup from .ListLookup;
import Lists from .Lists;
import Options from .Options;
import Sequences from .Sequences;
import UnicodeScalars from .Strings.UnicodeScalars;

shape Parser[T] {
    argDefinitions: ArgDefinitions,
    parseStringArgs: Fun (StringArgs) !ParseFailure -> T,
}

shape ArgDefinitions {
    positional: ListBuilder.Builder[ArgDefinition],
    options: ListBuilder.Builder[#(String, ArgDefinition)],
}

shape ArgDefinition {
    name: String,
    isOption: Bool,
    isFlag: Bool,
}

shape ArgType[T] {
    parse: Fun (.name: String, .argument: Option[String]) !ParseFailure -> T,
}

union ParseResult[+T] =
    | Success[T] {
        value: T,
    }
    | Failure {
        message: String,
    };

effect ParseFailure {
    .fail: (String) -> Nothing,
}

val string = ArgType(
    .parse = fun (.name: String, .argument: Option[String]) !ParseFailure -> String {
        when (argument) {
            is Some {
                argument.value
            }
            is None {
                ParseFailure.fail!("required argument is missing: " + name)
            }
        }
    },
);

fun optional[T](argType: ArgType[T]) -> ArgType[Option[T]] {
    ArgType(
        .parse = fun(.name: String, .argument: Option[String]) !ParseFailure -> Option[T] {
            when (argument) {
                is Some {
                    val result = argType.parse!(.name = name, .argument = argument);
                    some(result)
                }
                is None {
                    none
                }
            }
        }
    )
}

type StringArgs = ListLookup.ListLookup[String, String];

fun parser[T](initialValue: T) -> Parser[T] {
    Parser(
        .argDefinitions = ArgDefinitions(
            .positional = ListBuilder.builder(),
            .options = ListBuilder.builder(),
        ),
        .parseStringArgs = fun (stringArgs: StringArgs) => initialValue,
    )
}

fun parse[T](parser: Parser[T], args: Lists.List[String]) -> ParseResult[T] {
    handle ParseFailure {
        val stringArgs = toStringArgs!(
            .positionals = ListBuilder.toList(parser.argDefinitions.positional),
            .options = ListLookup.create(UnicodeScalars.eq, ListBuilder.toList(parser.argDefinitions.options)),
            .args = args,
        );
        val result = parser.parseStringArgs!(ListLookup.create(UnicodeScalars.eq, stringArgs));
        Success(.value = result)
    } on {
        .fail = (message: String) {
            exit Failure(.message = message)
        }
    }
}

fun toStringArgs(
    .positionals: Lists.List[ArgDefinition],
    .options: ListLookup.ListLookup[String, ArgDefinition],
    .args: Lists.List[String],
) !ParseFailure -> Lists.List[#(String, String)] {
    shape State {
        args: Lists.List[String],
        positionals: Lists.List[ArgDefinition],
        result: Lists.List[#(String, String)],
    }

    effect StateAccess {
        .get: () -> State,
        .set: (State) -> Unit,
    }

    val initialState = State(
        .args = args,
        .positionals = positionals,
        .result = Lists.nil,
    );

    fun readArguments() !StateAccess | ParseFailure -> Lists.List[#(String, String)] {
        val arg = nextArg!();

        when (arg) {
            is Some(.value as arg) {
                readArgument!(arg);
                tailrec readArguments!()
            }
            is None {
                StateAccess.get!().result
            }
        }
    }

    fun nextArg() !StateAccess -> Option[String] {
        val state = StateAccess.get!();
        val args = state.args;
        when (args) {
            is Lists.Cons {
                val newState = State(...state, .args = args.tail);
                StateAccess.set!(newState);
                some(args.head)
            }
            is Lists.Nil {
                none
            }
        }
    }

    fun readArgument(arg: String) !StateAccess | ParseFailure -> Unit {
        if (UnicodeScalars.startsWith("--", arg)) {
            readOption!(arg);
        } else {
            storePositional!(arg);
        }
    }

    fun readOption(arg: String) !StateAccess | ParseFailure -> Unit {
        // TODO: better string splitting
        val index = UnicodeScalars.stringToSequence(arg)
            |> Sequences.findIndex~(fun (scalar: UnicodeScalar) => scalar == '=');

        when (index) {
            is Some(.value as index) {
                val optionName = UnicodeScalars.left(index, arg);
                val argValue = UnicodeScalars.dropLeft(index + 1, arg);
                readOptionWithImmediateValue!(optionName, argValue);
            }
            is None {
                readOptionWithoutImmediateValue!(arg);
            }
        }
    }

    fun readOptionWithImmediateValue(optionName: String, argValue: String) ! StateAccess | ParseFailure -> Unit {
        val option = lookupOption!(optionName);
        if (option.isFlag) {
            ParseFailure.fail!("flag does not take value: " + optionName);
        } else {
            storeOption!(option, argValue);
        }
    }

    fun readOptionWithoutImmediateValue(optionName: String) ! StateAccess | ParseFailure -> Unit {
        val option = lookupOption!(optionName);
        if (option.isFlag) {
            storeOption!(option, "");
        } else {
            val argValue = nextStringOrFail!("option is missing value: " + option.name);
            storeOption!(option, argValue);
        }
    }

    fun lookupOption(name: String) !ParseFailure -> ArgDefinition {
        when (ListLookup.lookup(options, name)) {
            is Some(.value as option) {
                option
            }
            is None {
                ParseFailure.fail!("unknown option: " + name)
            }
        }
    }

    fun storeOption(option: ArgDefinition, value: String) !StateAccess -> Unit {
        val state = StateAccess.get!();

        val newResult = Lists.cons(#(option.name, value), state.result);
        StateAccess.set!(State(...state, .result = newResult))
    }

    fun storePositional(value: String) !StateAccess | ParseFailure -> Unit {
        val state = StateAccess.get!();

        val positionals = state.positionals;
        when (positionals) {
            is Lists.Cons {
                val newResult = Lists.cons(#(positionals.head.name, value), state.result);
                val newState = State(
                    ...state,
                    .positionals = positionals.tail,
                    .result = newResult,
                );
                StateAccess.set!(newState);
            }
            is Lists.Nil {
                ParseFailure.fail!("extra positional argument: " + value);
            }
        }
    }

    fun nextStringOrFail(message: String) !StateAccess | ParseFailure -> String {
        val arg = nextArg!();
        when (arg) {
            is Some(.value as arg) {
                arg
            }
            is None {
                ParseFailure.fail!(message)
            }
        }
    }

    handle StateAccess withstate(initialState) {
        readArguments!()
    } on {
        .get = (state: State) {
            resume state withstate state
        },

        .set = (state: State, newState: State) {
            resume unit withstate newState
        },
    }
}

fun positional[A, T, R](
    name: String,
    argType: ArgType[A],
    add: Fun (A, T) -> R,
    parser: Parser[T],
) -> Parser[R] {
    val argDefinition = ArgDefinition(
        .name = name,
        .isOption = false,
        .isFlag = false,
    );

    Parser[R](
        .argDefinitions = ArgDefinitions(
            ...parser.argDefinitions,
            .positional = ListBuilder.append(parser.argDefinitions.positional, argDefinition),
        ),
        .parseStringArgs = fun (stringArgs: StringArgs) !ParseFailure {
            val otherArgs = parser.parseStringArgs!(stringArgs);
            val stringArg = ListLookup.lookup(stringArgs, name);
            val value = argType.parse!(.name = name, .argument = stringArg);
            add(value, otherArgs)
        },
    )
}

fun option[A, T, R](
    name: String,
    argType: ArgType[A],
    add: Fun (A, T) -> R,
    parser: Parser[T],
) -> Parser[R] {
    val argDefinition = ArgDefinition(
        .name = name,
        .isOption = true,
        .isFlag = false,
    );

    Parser[R](
        .argDefinitions = ArgDefinitions(
            ...parser.argDefinitions,
            .options = ListBuilder.append(parser.argDefinitions.options, #(name, argDefinition)),
        ),
        .parseStringArgs = fun (stringArgs: StringArgs) !ParseFailure {
            val otherArgs = parser.parseStringArgs!(stringArgs);
            val stringArg = ListLookup.lookup(stringArgs, name);
            val value = argType.parse!(.name = name, .argument = stringArg);
            add(value, otherArgs)
        },
    )
}

fun flag[T, R](
    name: String,
    add: Fun (Bool, T) -> R,
    parser: Parser[T],
) -> Parser[R] {
    val argDefinition = ArgDefinition(
        .name = name,
        .isOption = true,
        .isFlag = true,
    );

    Parser[R](
        .argDefinitions = ArgDefinitions(
            ...parser.argDefinitions,
            .options = ListBuilder.append(parser.argDefinitions.options, #(name, argDefinition)),
        ),
        .parseStringArgs = fun (stringArgs: StringArgs) !ParseFailure {
            val otherArgs = parser.parseStringArgs!(stringArgs);
            val stringArg = ListLookup.lookup(stringArgs, name);
            val value = stringArg is Some;
            add(value, otherArgs)
        },
    )
}

fun map[T, R](f: Fun (T) -> R, parser: Parser[T]) -> Parser[R] {
    Parser[R](
        .argDefinitions = parser.argDefinitions,
        .parseStringArgs = fun (stringArgs) !_ {
            val result = parser.parseStringArgs!(stringArgs);
            f(result)
        },
    )
}

fun apply[R](parser: Parser[Fun () -> R]) -> Parser[R] {
    map(fun (f) => f(), parser)
}
