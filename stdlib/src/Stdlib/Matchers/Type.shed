export has, hasField, isType, isTypeWith;

import @(
    .Matcher as Matcher,
    .Result as Result,
    .Success as Success,
    .success as success,
    .Failure as Failure,
    .failure as failure,
) from .Core;

fun has[T, U](
    featureName: String,
    get: Fun (T) -> U,
    featureMatcher: Matcher[U],
) -> Matcher[T] {
    Matcher[T](
        .description = featureName + " " + featureMatcher.description,
        .match = fun (actual: T) -> Result {
            val feature = get(actual);
            val result = featureMatcher.match(feature);
            when (result) {
                is Success {
                    success
                }
                is Failure {
                    failure(featureName + " " + result.message)
                }
            }
        },
    )
}

fun hasField[T, U](
    field: ShapeField[T, U, Any],
    valueMatcher: Matcher[U],
) -> Matcher[T] {
    has(field.name, field.get, valueMatcher)
}

fun isType[T, U](
    .description: String,
    .describeValue: Fun (T) -> String,
    .cast: Fun (T) -> Option[U],
) -> Matcher[T] {
    Matcher[T](
        .description = description,
        .match = fun (actual: T) -> Result {
            val result = cast(actual);
            when (result) {
                is Some {
                    success
                }
                is None {
                    failure("was " + describeValue(actual))
                }
            }
        },
    )
}

fun isTypeWith[T, U](
    .description: String,
    .describeValue: Fun (T) -> String,
    .cast: Fun (T) -> Option[U],
    .with: Matcher[U],
) -> Matcher[T] {
    Matcher[T](
        .description = description + ": " + with.description,
        .match = fun (actual: T) -> Result {
            val result = cast(actual);
            when (result) {
                is Some {
                    with.match(result.value)
                }
                is None {
                    failure("was " + describeValue(actual))
                }
            }
        },
    )
}
