export has, hasField, isType, isTypeWith;

import @(
    .Matcher as Matcher,
    .Result as Result,
    .Success as Success,
    .success as success,
    .Failure as Failure,
    .failure as failure,
) from .Core;
import @(.indent as indent) from .Formatting;

fun has[T, U](
    featureName: String,
    get: Fun (T) -> U,
    featureMatcher: Matcher[U],
) -> Matcher[T] {
    Matcher[T](
        .description = featureName + ":" + indent("\n" + featureMatcher.description),
        .match = fun (actual: T) -> Result {
            val feature = get(actual);
            val result = featureMatcher.match(feature);
            when (result) {
                is Success {
                    success
                }
                is Failure {
                    failure(featureName + ":" + indent("\n" + result.message))
                }
            }
        },
    )
}

fun hasField[T, U](
    field: ShapeField[T, U],
    valueMatcher: Matcher[U],
) -> Matcher[T] {
    has("." + field.name, field.get, valueMatcher)
}

fun isType[T, U](
    .description: String,
    .describeValue: Fun (T) -> String,
    .cast: Fun (T) -> Option[U],
) -> Matcher[T] {
    Matcher[T](
        .description = description,
        .match = fun (actual: T) -> Result {
            val result = cast(actual);
            when (result) {
                is Some {
                    success
                }
                is None {
                    failure("was " + describeValue(actual))
                }
            }
        },
    )
}

fun isTypeWith[T, U](
    .description: String,
    .describeValue: Fun (T) -> String,
    .cast: Fun (T) -> Option[U],
    .with: Matcher[U],
) -> Matcher[T] {
    Matcher[T](
        .description = description + ":" + indent("\n" + with.description),
        .match = fun (actual: T) -> Result {
            val castResult = cast(actual);
            when (castResult) {
                is Some {
                    val matchResult = with.match(castResult.value);
                    when (matchResult) {
                        is Success {
                            matchResult
                        }
                        is Failure {
                            failure(description + ":" + indent("\n" + matchResult.message))
                        }
                    }
                }
                is None {
                    failure("was " + describeValue(actual))
                }
            }
        },
    )
}

