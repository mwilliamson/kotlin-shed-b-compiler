export assert, assertStringEquals, assertThat, fail, Test, TestCase, TestSuite, suite, testCase, runTests;

import Lists from .Lists;
import Matchers from .Matchers;
import UnicodeScalars from .Strings.UnicodeScalars;

shape AssertionError {
    message: String,
}

fun fail(message: String) -> AssertionResult {
    AssertionResult(.error = some(AssertionError(.message = message)))
}

fun assert(value: Bool) -> AssertionResult {
    if (value) {
        AssertionResult(.error = none)
    } else {
        fail("value was false")
    }
}

fun assertStringEquals(left: String, right: String) -> AssertionResult {
    if (left == right) {
        AssertionResult(.error = none)
    } else {
        fail("left:" + indent("\n" + left) + "\nright:" + indent("\n" + right))
    }
}

fun assertThat[T](value: T, matcher: Matchers.Matcher[T]) -> AssertionResult {
    val result = matcher.match(value);
    when (result) {
        is Matchers.Failure {
            val message = "expected:" + indent("\n" + matcher.description) + "\nbut:" + indent("\n" + result.message);
            val error = AssertionError(.message = message);
            AssertionResult(.error = some(error))
        }
        is Matchers.Success {
            AssertionResult(.error = none)
        }
    }
}

shape AssertionResult {
    error: Option[AssertionError],
}

union Test =
    | TestCase {
        name: String,
        run: Fun () -> AssertionResult,
    }
    | TestSuite {
        name: String,
        tests: Lists.List[Test],
    };

union TestResult =
    | TestCaseResult {
        name: String,
        error: Option[AssertionError],
    }
    | TestSuiteResult {
        name: String,
        results: Lists.List[TestResult],
    };

fun testCase(name: String, run: Fun () -> AssertionResult) -> TestCase {
    TestCase(.name = name, .run = run)
}

fun suite(name: String, tests: Lists.List[Test]) -> Test {
    TestSuite(.name = name, .tests = tests)
}

val greenCode = "\u{1B}[32m";
val redCode = "\u{1B}[31m";
val blackCode = "\u{1B}[39m";

fun runTests(tests: Lists.List[Test]) !Io -> Int {
    val results = Lists.map!(runTest ~ (.parent = none), tests);
    print!("\n");
    Lists.forEach!(printFailures, results);

    val counts = countTestResults(results);

    print!(intToString(counts.successes) + " tests passed, ");
    print!(intToString(counts.failures) + " tests failed\n");

    if (counts.failures == 0) {
        0
    } else {
        1
    }
}

fun countTestResults(results: Lists.List[TestResult]) -> TestCounts {
    Lists.foldLeft(
        fun (counts: TestCounts, result: TestResult) =>
            addTestCounts(counts, countTestResult(result)),
        TestCounts(.failures = 0, .successes = 0),
        results,
    )
}

fun countTestResult(result: TestResult) -> TestCounts {
    when (result) {
        is TestCaseResult {
            when (result.error) {
                is Some[AssertionError] {
                    TestCounts(.failures = 1, .successes = 0)
                }
                is None {
                    TestCounts(.failures = 0, .successes = 1)
                }
            }
        }
        is TestSuiteResult {
            countTestResults(result.results)
        }
    }
}

fun addTestCounts(counts1: TestCounts, counts2: TestCounts) -> TestCounts {
    TestCounts(
        .failures = counts1.failures + counts2.failures,
        .successes = counts1.successes + counts2.successes,
    )
}

shape TestCounts {
    failures: Int,
    successes: Int,
}

fun printFailures(result: TestResult) !Io -> Unit {
    // TODO: formatting of suites
    when (result) {
        is TestCaseResult {
            val error = result.error;
            if (error is Some[AssertionError]) {
                print!("\n");
                print!(redCode);
                print!("✖ ");
                print!(result.name);
                print!(":\n");
                print!(error.value.message);
                print!(blackCode);
                print!("\n\n");
            }
        }
        is TestSuiteResult {
            Lists.forEach!(printFailures, result.results);
        }
    }
}

fun runTest(test: Test, .parent: Option[String]) !Io -> TestResult {
    val namePrefix = when (parent) {
        is Some[String] {
            parent.value + ": "
        }
        is None {
            ""
        }
    };

    when (test) {
        is TestCase {
            val result = test.run();
            val error = result.error;

            when (error) {
                is Some[AssertionError] {
                    print!(redCode);
                    print!("✖");
                }
                is None {
                    print!(greenCode);
                    print!("✔");
                }
            }
            print!(blackCode);
            TestCaseResult(.name = namePrefix + test.name, .error = result.error)
        }
        is TestSuite {
            // TODO: indentation
            val name = namePrefix + test.name;
            val results = Lists.map!(runTest ~ (.parent = some(name)), test.tests);
            TestSuiteResult(.name = name, .results = results)
        }
    }
}

// TODO: remove indent duplication
fun indent(value: String) -> String {
    UnicodeScalars.replace("\n", "\n  ", value)
}
