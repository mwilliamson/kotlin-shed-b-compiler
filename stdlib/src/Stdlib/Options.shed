export default, flatMap, flatten, map;

fun default[T](defaultValue: T, option: Option[T]) -> T {
    when (option) {
        is Some[T] {
            option.value
        }
        is None {
            defaultValue
        }
    }
}

fun flatMap[T, R, !E](func: Fun (T) !E -> Option[R], option: Option[T]) !E -> Option[R] {
    when (option) {
        is Some[T] {
            func!(option.value)
        }
        is None {
            none
        }
    }
}

fun flatten[T](option: Option[Option[T]]) -> Option[T] {
    when (option) {
        is Some {
            option.value
        }
        is None {
            none
        }
    }
}

fun map[T, R, !E](func: Fun (T) !E -> R, option: Option[T]) !E -> Option[R] {
    when (option) {
        is Some[T] {
            some(func!(option.value))
        }
        is None {
            none
        }
    }
}
