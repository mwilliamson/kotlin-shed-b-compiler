export parseInt;

import Options from .Options;
// TODO: Use Bytes instead
import UnicodeScalars from .Strings.UnicodeScalars;

fun parseInt(text: String) -> Option[Int] {
    val first = UnicodeScalars.first(text);
    first |> Options.flatMap ~ (fun (unicodeScalar: UnicodeScalar) =>
        if (unicodeScalar == '-') {
            parsePositiveInt(UnicodeScalars.dropLeft(1, text))
                |> Options.map ~ (fun (value: Int) => -value)
        } else {
            parsePositiveInt(text)
        }
    )
}

fun parsePositiveInt(text: String) -> Option[Int] {
    if (UnicodeScalars.isEmpty(text)) {
        none
    } else {
        UnicodeScalars.foldLeft(
            fun (acc: Option[Int], unicodeScalar: UnicodeScalar) -> Option[Int] {
                Options.flatMap(
                    fun (acc: Int) -> Option[Int] {
                        if (unicodeScalar >= '0' && unicodeScalar <= '9') {
                            val digit = UnicodeScalars.unicodeScalarToInt(unicodeScalar) - UnicodeScalars.unicodeScalarToInt('0');
                            some(acc * 10 + digit)
                        } else {
                            none
                        }
                    },
                    acc,
                )
            },
            some(0),
            text
        )
    }
}
