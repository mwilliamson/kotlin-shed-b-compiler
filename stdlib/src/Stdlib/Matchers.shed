export
    Matcher,

    Result,
    Success,
    Failure,
    success,
    failure,
    isSuccess,

    isBool,
    isInt,
    isString,

    has,
    hasField,
    isType,
    isTypeWith,

    allOf,
    anything,
    isNone,
    isSome;

import Lists from .Lists;
import @(
    .Matcher as Matcher,
    .Result as Result,
    .Success as Success,
    .Failure as Failure,
    .success as success,
    .failure as failure,
    .isSuccess as isSuccess,
) from .Matchers.Core;
import @(
    .isBool as isBool,
    .isInt as isInt,
    .isString as isString,
) from .Matchers.Equality;
import @(
    .has as has,
    .hasField as hasField,
    .isType as isType,
    .isTypeWith as isTypeWith,
) from .Matchers.Type;
import Options from .Options;
import UnicodeScalars from .Strings.UnicodeScalars;

fun allOf[T](matchers: Lists.List[Matcher[T]]) -> Matcher[T] {
    Matcher(
        // TODO: better formatting (bullet list?)
        .description = "all of: " + UnicodeScalars.join(
            "; ",
            Lists.map(fun (matcher: Matcher[T]) => matcher.description, matchers),
        ),
        .match = fun (x: T) => Lists.firstSome(
            fun (matcher: Matcher[T]) {
                val result = matcher.match(x);
                when (result) {
                    is Success {
                        none
                    }
                    is Failure {
                        some(result)
                    }
                }
            },
            matchers,
        ) |> Options.default~(success),
    )
}

fun anything() -> Matcher[Any] {
    Matcher(
        .description = "anything",
        .match = fun (x: Any) => success,
    )
}

fun isNone() -> Matcher[Option[Any]] {
    Matcher(
        .description = "none",
        .match = fun (actual: Option[Any]) -> Result {
            if (actual is None) {
                success
            } else {
                failure("was some()")
            }
        }
    )
}

fun isSome[T](matcher: Matcher[T]) -> Matcher[Option[T]] {
    Matcher(
        .description = "some with value:" + indent("\n" + matcher.description),
        .match = fun (actual: Option[T]) -> Result {
            // TODO: use when
            if (actual is Some[T]) {
                val matchResult = matcher.match(actual.value);
                when (matchResult) {
                    is Success {
                        matchResult
                    }
                    is Failure {
                        failure("some with value:" + indent("\n" + matchResult.message))
                    }
                }
            } else {
                failure("was none")
            }
        }
    )
}

// TODO: remove indent duplication
fun indent(value: String) -> String {
    UnicodeScalars.replace("\n", "\n  ", value)
}
